package com.stkj.supermarket.base.greendao.generate;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.stkj.supermarket.pay.model.GreenDaoGoodsOrderInfoConvert;
import java.util.List;

import com.stkj.supermarket.pay.model.PayHistoryOrderInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAY_HISTORY_ORDER_INFO".
*/
public class PayHistoryOrderInfoDao extends AbstractDao<PayHistoryOrderInfo, Long> {

    public static final String TABLENAME = "PAY_HISTORY_ORDER_INFO";

    /**
     * Properties of entity PayHistoryOrderInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property TotalPrice = new Property(1, String.class, "totalPrice", false, "TOTAL_PRICE");
        public final static Property TotalCount = new Property(2, String.class, "totalCount", false, "TOTAL_COUNT");
        public final static Property OrderStatus = new Property(3, String.class, "orderStatus", false, "ORDER_STATUS");
        public final static Property OrderType = new Property(4, int.class, "orderType", false, "ORDER_TYPE");
        public final static Property PayType = new Property(5, int.class, "payType", false, "PAY_TYPE");
        public final static Property OrderId = new Property(6, String.class, "orderId", false, "ORDER_ID");
        public final static Property OrderNumber = new Property(7, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property FormatOrderPayTime = new Property(8, String.class, "formatOrderPayTime", false, "FORMAT_ORDER_PAY_TIME");
        public final static Property OrderListInfoList = new Property(9, String.class, "orderListInfoList", false, "ORDER_LIST_INFO_LIST");
    }

    private final GreenDaoGoodsOrderInfoConvert orderListInfoListConverter = new GreenDaoGoodsOrderInfoConvert();

    public PayHistoryOrderInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PayHistoryOrderInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAY_HISTORY_ORDER_INFO\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TOTAL_PRICE\" TEXT," + // 1: totalPrice
                "\"TOTAL_COUNT\" TEXT," + // 2: totalCount
                "\"ORDER_STATUS\" TEXT," + // 3: orderStatus
                "\"ORDER_TYPE\" INTEGER NOT NULL ," + // 4: orderType
                "\"PAY_TYPE\" INTEGER NOT NULL ," + // 5: payType
                "\"ORDER_ID\" TEXT," + // 6: orderId
                "\"ORDER_NUMBER\" TEXT," + // 7: orderNumber
                "\"FORMAT_ORDER_PAY_TIME\" TEXT," + // 8: formatOrderPayTime
                "\"ORDER_LIST_INFO_LIST\" TEXT);"); // 9: orderListInfoList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAY_HISTORY_ORDER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PayHistoryOrderInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String totalPrice = entity.getTotalPrice();
        if (totalPrice != null) {
            stmt.bindString(2, totalPrice);
        }
 
        String totalCount = entity.getTotalCount();
        if (totalCount != null) {
            stmt.bindString(3, totalCount);
        }
 
        String orderStatus = entity.getOrderStatus();
        if (orderStatus != null) {
            stmt.bindString(4, orderStatus);
        }
        stmt.bindLong(5, entity.getOrderType());
        stmt.bindLong(6, entity.getPayType());
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(7, orderId);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(8, orderNumber);
        }
 
        String formatOrderPayTime = entity.getFormatOrderPayTime();
        if (formatOrderPayTime != null) {
            stmt.bindString(9, formatOrderPayTime);
        }
 
        List orderListInfoList = entity.getOrderListInfoList();
        if (orderListInfoList != null) {
            stmt.bindString(10, orderListInfoListConverter.convertToDatabaseValue(orderListInfoList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PayHistoryOrderInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String totalPrice = entity.getTotalPrice();
        if (totalPrice != null) {
            stmt.bindString(2, totalPrice);
        }
 
        String totalCount = entity.getTotalCount();
        if (totalCount != null) {
            stmt.bindString(3, totalCount);
        }
 
        String orderStatus = entity.getOrderStatus();
        if (orderStatus != null) {
            stmt.bindString(4, orderStatus);
        }
        stmt.bindLong(5, entity.getOrderType());
        stmt.bindLong(6, entity.getPayType());
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(7, orderId);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(8, orderNumber);
        }
 
        String formatOrderPayTime = entity.getFormatOrderPayTime();
        if (formatOrderPayTime != null) {
            stmt.bindString(9, formatOrderPayTime);
        }
 
        List orderListInfoList = entity.getOrderListInfoList();
        if (orderListInfoList != null) {
            stmt.bindString(10, orderListInfoListConverter.convertToDatabaseValue(orderListInfoList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PayHistoryOrderInfo readEntity(Cursor cursor, int offset) {
        PayHistoryOrderInfo entity = new PayHistoryOrderInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // totalPrice
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // totalCount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orderStatus
            cursor.getInt(offset + 4), // orderType
            cursor.getInt(offset + 5), // payType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orderId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // orderNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // formatOrderPayTime
            cursor.isNull(offset + 9) ? null : orderListInfoListConverter.convertToEntityProperty(cursor.getString(offset + 9)) // orderListInfoList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PayHistoryOrderInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTotalPrice(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTotalCount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderStatus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrderType(cursor.getInt(offset + 4));
        entity.setPayType(cursor.getInt(offset + 5));
        entity.setOrderId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrderNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFormatOrderPayTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrderListInfoList(cursor.isNull(offset + 9) ? null : orderListInfoListConverter.convertToEntityProperty(cursor.getString(offset + 9)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PayHistoryOrderInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PayHistoryOrderInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PayHistoryOrderInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
