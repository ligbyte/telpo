package com.stkj.supermarket.base.greendao.generate;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.stkj.supermarket.setting.model.FacePassPeopleInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FACE_PASS_PEOPLE_INFO".
*/
public class FacePassPeopleInfoDao extends AbstractDao<FacePassPeopleInfo, Long> {

    public static final String TABLENAME = "FACE_PASS_PEOPLE_INFO";

    /**
     * Properties of entity FacePassPeopleInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Unique_number = new Property(1, String.class, "Unique_number", false, "UNIQUE_NUMBER");
        public final static Property Card_state = new Property(2, Integer.class, "Card_state", false, "CARD_STATE");
        public final static Property UID = new Property(3, String.class, "UID", false, "UID");
        public final static Property Full_Name = new Property(4, String.class, "Full_Name", false, "FULL__NAME");
        public final static Property DepNameType = new Property(5, String.class, "DepNameType", false, "DEP_NAME_TYPE");
        public final static Property IdentityCard = new Property(6, String.class, "IdentityCard", false, "IDENTITY_CARD");
        public final static Property Phone = new Property(7, String.class, "Phone", false, "PHONE");
        public final static Property UserNumber = new Property(8, String.class, "UserNumber", false, "USER_NUMBER");
        public final static Property Card_Number = new Property(9, String.class, "Card_Number", false, "CARD__NUMBER");
        public final static Property CardType = new Property(10, String.class, "CardType", false, "CARD_TYPE");
        public final static Property Balance = new Property(11, double.class, "Balance", false, "BALANCE");
        public final static Property Opening_date = new Property(12, String.class, "Opening_date", false, "OPENING_DATE");
        public final static Property Consumption_quota = new Property(13, double.class, "Consumption_quota", false, "CONSUMPTION_QUOTA");
        public final static Property ImgData = new Property(14, String.class, "imgData", false, "IMG_DATA");
        public final static Property AccountType = new Property(15, String.class, "AccountType", false, "ACCOUNT_TYPE");
        public final static Property CallBack = new Property(16, Boolean.class, "callBack", false, "CALL_BACK");
        public final static Property CBGFaceToken = new Property(17, String.class, "CBGFaceToken", false, "CBGFACE_TOKEN");
        public final static Property CBGCheckFaceResult = new Property(18, int.class, "CBGCheckFaceResult", false, "CBGCHECK_FACE_RESULT");
    }


    public FacePassPeopleInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FacePassPeopleInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FACE_PASS_PEOPLE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNIQUE_NUMBER\" TEXT," + // 1: Unique_number
                "\"CARD_STATE\" INTEGER," + // 2: Card_state
                "\"UID\" TEXT," + // 3: UID
                "\"FULL__NAME\" TEXT," + // 4: Full_Name
                "\"DEP_NAME_TYPE\" TEXT," + // 5: DepNameType
                "\"IDENTITY_CARD\" TEXT," + // 6: IdentityCard
                "\"PHONE\" TEXT," + // 7: Phone
                "\"USER_NUMBER\" TEXT UNIQUE ," + // 8: UserNumber
                "\"CARD__NUMBER\" TEXT," + // 9: Card_Number
                "\"CARD_TYPE\" TEXT," + // 10: CardType
                "\"BALANCE\" REAL NOT NULL ," + // 11: Balance
                "\"OPENING_DATE\" TEXT," + // 12: Opening_date
                "\"CONSUMPTION_QUOTA\" REAL NOT NULL ," + // 13: Consumption_quota
                "\"IMG_DATA\" TEXT," + // 14: imgData
                "\"ACCOUNT_TYPE\" TEXT," + // 15: AccountType
                "\"CALL_BACK\" INTEGER," + // 16: callBack
                "\"CBGFACE_TOKEN\" TEXT," + // 17: CBGFaceToken
                "\"CBGCHECK_FACE_RESULT\" INTEGER NOT NULL );"); // 18: CBGCheckFaceResult
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FACE_PASS_PEOPLE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FacePassPeopleInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Unique_number = entity.getUnique_number();
        if (Unique_number != null) {
            stmt.bindString(2, Unique_number);
        }
 
        Integer Card_state = entity.getCard_state();
        if (Card_state != null) {
            stmt.bindLong(3, Card_state);
        }
 
        String UID = entity.getUID();
        if (UID != null) {
            stmt.bindString(4, UID);
        }
 
        String Full_Name = entity.getFull_Name();
        if (Full_Name != null) {
            stmt.bindString(5, Full_Name);
        }
 
        String DepNameType = entity.getDepNameType();
        if (DepNameType != null) {
            stmt.bindString(6, DepNameType);
        }
 
        String IdentityCard = entity.getIdentityCard();
        if (IdentityCard != null) {
            stmt.bindString(7, IdentityCard);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(8, Phone);
        }
 
        String UserNumber = entity.getUserNumber();
        if (UserNumber != null) {
            stmt.bindString(9, UserNumber);
        }
 
        String Card_Number = entity.getCard_Number();
        if (Card_Number != null) {
            stmt.bindString(10, Card_Number);
        }
 
        String CardType = entity.getCardType();
        if (CardType != null) {
            stmt.bindString(11, CardType);
        }
        stmt.bindDouble(12, entity.getBalance());
 
        String Opening_date = entity.getOpening_date();
        if (Opening_date != null) {
            stmt.bindString(13, Opening_date);
        }
        stmt.bindDouble(14, entity.getConsumption_quota());
 
        String imgData = entity.getImgData();
        if (imgData != null) {
            stmt.bindString(15, imgData);
        }
 
        String AccountType = entity.getAccountType();
        if (AccountType != null) {
            stmt.bindString(16, AccountType);
        }
 
        Boolean callBack = entity.getCallBack();
        if (callBack != null) {
            stmt.bindLong(17, callBack ? 1L: 0L);
        }
 
        String CBGFaceToken = entity.getCBGFaceToken();
        if (CBGFaceToken != null) {
            stmt.bindString(18, CBGFaceToken);
        }
        stmt.bindLong(19, entity.getCBGCheckFaceResult());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FacePassPeopleInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Unique_number = entity.getUnique_number();
        if (Unique_number != null) {
            stmt.bindString(2, Unique_number);
        }
 
        Integer Card_state = entity.getCard_state();
        if (Card_state != null) {
            stmt.bindLong(3, Card_state);
        }
 
        String UID = entity.getUID();
        if (UID != null) {
            stmt.bindString(4, UID);
        }
 
        String Full_Name = entity.getFull_Name();
        if (Full_Name != null) {
            stmt.bindString(5, Full_Name);
        }
 
        String DepNameType = entity.getDepNameType();
        if (DepNameType != null) {
            stmt.bindString(6, DepNameType);
        }
 
        String IdentityCard = entity.getIdentityCard();
        if (IdentityCard != null) {
            stmt.bindString(7, IdentityCard);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(8, Phone);
        }
 
        String UserNumber = entity.getUserNumber();
        if (UserNumber != null) {
            stmt.bindString(9, UserNumber);
        }
 
        String Card_Number = entity.getCard_Number();
        if (Card_Number != null) {
            stmt.bindString(10, Card_Number);
        }
 
        String CardType = entity.getCardType();
        if (CardType != null) {
            stmt.bindString(11, CardType);
        }
        stmt.bindDouble(12, entity.getBalance());
 
        String Opening_date = entity.getOpening_date();
        if (Opening_date != null) {
            stmt.bindString(13, Opening_date);
        }
        stmt.bindDouble(14, entity.getConsumption_quota());
 
        String imgData = entity.getImgData();
        if (imgData != null) {
            stmt.bindString(15, imgData);
        }
 
        String AccountType = entity.getAccountType();
        if (AccountType != null) {
            stmt.bindString(16, AccountType);
        }
 
        Boolean callBack = entity.getCallBack();
        if (callBack != null) {
            stmt.bindLong(17, callBack ? 1L: 0L);
        }
 
        String CBGFaceToken = entity.getCBGFaceToken();
        if (CBGFaceToken != null) {
            stmt.bindString(18, CBGFaceToken);
        }
        stmt.bindLong(19, entity.getCBGCheckFaceResult());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FacePassPeopleInfo readEntity(Cursor cursor, int offset) {
        FacePassPeopleInfo entity = new FacePassPeopleInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Unique_number
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Card_state
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Full_Name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DepNameType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // IdentityCard
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // UserNumber
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Card_Number
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CardType
            cursor.getDouble(offset + 11), // Balance
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Opening_date
            cursor.getDouble(offset + 13), // Consumption_quota
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // imgData
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // AccountType
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // callBack
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // CBGFaceToken
            cursor.getInt(offset + 18) // CBGCheckFaceResult
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FacePassPeopleInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnique_number(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCard_state(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setUID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFull_Name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDepNameType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIdentityCard(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCard_Number(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCardType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBalance(cursor.getDouble(offset + 11));
        entity.setOpening_date(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setConsumption_quota(cursor.getDouble(offset + 13));
        entity.setImgData(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAccountType(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCallBack(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setCBGFaceToken(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCBGCheckFaceResult(cursor.getInt(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FacePassPeopleInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FacePassPeopleInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FacePassPeopleInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
