package com.stkj.supermarket.base.greendao.generate;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.stkj.supermarket.pay.model.GreenDaoGoodsOrderInfoConvert;
import java.util.List;

import com.stkj.supermarket.pay.model.WaitHistoryOrderInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WAIT_HISTORY_ORDER_INFO".
*/
public class WaitHistoryOrderInfoDao extends AbstractDao<WaitHistoryOrderInfo, Long> {

    public static final String TABLENAME = "WAIT_HISTORY_ORDER_INFO";

    /**
     * Properties of entity WaitHistoryOrderInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property TotalPrice = new Property(1, String.class, "totalPrice", false, "TOTAL_PRICE");
        public final static Property TotalCount = new Property(2, String.class, "totalCount", false, "TOTAL_COUNT");
        public final static Property OrderCreateTime = new Property(3, long.class, "orderCreateTime", false, "ORDER_CREATE_TIME");
        public final static Property FormatOrderCreateTime = new Property(4, String.class, "formatOrderCreateTime", false, "FORMAT_ORDER_CREATE_TIME");
        public final static Property OrderListInfoList = new Property(5, String.class, "orderListInfoList", false, "ORDER_LIST_INFO_LIST");
    }

    private final GreenDaoGoodsOrderInfoConvert orderListInfoListConverter = new GreenDaoGoodsOrderInfoConvert();

    public WaitHistoryOrderInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WaitHistoryOrderInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WAIT_HISTORY_ORDER_INFO\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TOTAL_PRICE\" TEXT," + // 1: totalPrice
                "\"TOTAL_COUNT\" TEXT," + // 2: totalCount
                "\"ORDER_CREATE_TIME\" INTEGER NOT NULL ," + // 3: orderCreateTime
                "\"FORMAT_ORDER_CREATE_TIME\" TEXT," + // 4: formatOrderCreateTime
                "\"ORDER_LIST_INFO_LIST\" TEXT);"); // 5: orderListInfoList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WAIT_HISTORY_ORDER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WaitHistoryOrderInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String totalPrice = entity.getTotalPrice();
        if (totalPrice != null) {
            stmt.bindString(2, totalPrice);
        }
 
        String totalCount = entity.getTotalCount();
        if (totalCount != null) {
            stmt.bindString(3, totalCount);
        }
        stmt.bindLong(4, entity.getOrderCreateTime());
 
        String formatOrderCreateTime = entity.getFormatOrderCreateTime();
        if (formatOrderCreateTime != null) {
            stmt.bindString(5, formatOrderCreateTime);
        }
 
        List orderListInfoList = entity.getOrderListInfoList();
        if (orderListInfoList != null) {
            stmt.bindString(6, orderListInfoListConverter.convertToDatabaseValue(orderListInfoList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WaitHistoryOrderInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String totalPrice = entity.getTotalPrice();
        if (totalPrice != null) {
            stmt.bindString(2, totalPrice);
        }
 
        String totalCount = entity.getTotalCount();
        if (totalCount != null) {
            stmt.bindString(3, totalCount);
        }
        stmt.bindLong(4, entity.getOrderCreateTime());
 
        String formatOrderCreateTime = entity.getFormatOrderCreateTime();
        if (formatOrderCreateTime != null) {
            stmt.bindString(5, formatOrderCreateTime);
        }
 
        List orderListInfoList = entity.getOrderListInfoList();
        if (orderListInfoList != null) {
            stmt.bindString(6, orderListInfoListConverter.convertToDatabaseValue(orderListInfoList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WaitHistoryOrderInfo readEntity(Cursor cursor, int offset) {
        WaitHistoryOrderInfo entity = new WaitHistoryOrderInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // totalPrice
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // totalCount
            cursor.getLong(offset + 3), // orderCreateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // formatOrderCreateTime
            cursor.isNull(offset + 5) ? null : orderListInfoListConverter.convertToEntityProperty(cursor.getString(offset + 5)) // orderListInfoList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WaitHistoryOrderInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTotalPrice(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTotalCount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderCreateTime(cursor.getLong(offset + 3));
        entity.setFormatOrderCreateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrderListInfoList(cursor.isNull(offset + 5) ? null : orderListInfoListConverter.convertToEntityProperty(cursor.getString(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WaitHistoryOrderInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WaitHistoryOrderInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WaitHistoryOrderInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
